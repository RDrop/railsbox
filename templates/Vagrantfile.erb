# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version '>= 1.5'

<%= render 'vagrant_plugins' %>

Vagrant.configure('2') do |config|

<% if params[:docker] %>

  containers = [
    { :name   => 'application',
      :ports  => ['80:80', '443:443'],
      :groups => %w(application), 
    },
    <% roles.each do |role| -%>
    { :name   => '<%= role %>',
      :ports  => [<%= docker_ports_for(role).join ', ' %>],
      :groups => %w(<%= role %>),
    },
    <% end %>
  ]

  containers.each do |opts|
    config.vm.define opts[:name] do |container|
      container.vm.provider 'docker' do |d|
        d.name                = opts[:name]
        d.vagrant_vagrantfile = 'Vagrantfile.host'
        d.cmd                 = ['/sbin/my_init', '--enable-insecure-key']
        d.image               = 'phusion/baseimage'
        d.ports               = opts[:ports]
        d.has_ssh             = true
      end

      if %w(application <%= params[:background_jobs].join(' ') %>).include?(opts[:name])
        # We need to use NFS + bindfs combination here because NFS gives adequate performance, but does
        # not allows to change the ownership of synced directory. bindfs will rebind the directory with
        # correct permissions.
        container.vm.synced_folder '../', '/vagrant', type: 'nfs'
        container.bindfs.bind_folder '/vagrant', '/vagrant'
      end

      container.ssh.username = "root"
      container.ssh.private_key_path = "phusion.key"

      container.vm.provision 'shell', inline: \
        'grep -q dockerhost /etc/hosts || (echo `/sbin/ip route|awk \'/default/ { print  $3 }\'` dockerhost >> /etc/hosts) &&
          apt-get update &&
          apt-get install -y python'

      container.vm.provision 'ansible' do |ansible|
        ansible.playbook = '../ansible/site.yml'

        ansible.groups = {}
        opts[:groups].each do |group|
          ansible.groups[group] = opts[:name]
        end
        ansible.groups['development:children'] = [opts[:name]]
        ansible.groups['docker:children'] = [opts[:name]]

        ansible.tags = ENV['TAGS']
        # ansible.verbose = 'vvvv'
      end
    end
  end

<% else %>
<%= render 'virtualbox_config' %>

  config.vm.box = '<%= params[:vm_os] %>'

  config.vm.network 'private_network', type: 'dhcp'
  config.vm.synced_folder '../', '<%= params[:vm_shared_directory] %>'<% if params[:vm_share_type] == 'NFS' -%>, type: 'nfs'<% end %>
  config.vm.synced_folder 'ansible', '/ansible'<% if params[:vm_share_type] == 'NFS' -%>, :type => 'nfs'<% end %>
  <% if params[:vm_share_type] == 'NFS' -%>
  config.bindfs.bind_folder '/vagrant', '/vagrant'
  config.bindfs.bind_folder '/ansible', '/ansible'
  <% end %>

  config.vm.define '<%= params[:vm_name] %>' do |machine|
    machine.vm.hostname = '<%= params[:server_name] %>'
    <% params[:vm_ports].each_value do |port| -%>
    machine.vm.network 'forwarded_port', :guest => <%= port[:guest] %>, :host => <%= port[:host] %>
    <% end %>
  end

  config.ssh.forward_agent = true

  if ansible_installed?
    config.vm.provision 'ansible' do |ansible|
      ansible.playbook = 'ansible/site.yml'
      ansible.sudo = true
      ansible.groups = {
        'application' => %w(<%= params[:vm_name] %>),
        'vm' => %w(<%= params[:vm_name] %>),
        <% roles.each do |role| -%>
        '<%= role %>' => %w(<%= params[:vm_name] %>),
        <% end %>
        'development:children' => %w(application vm <%= roles.join(' ') %>),
      }
      ansible.tags = ENV['TAGS']
    end
  else
    Dir['shell/*.sh'].each do |script|
      config.vm.provision 'shell', :path => script, :privileged => false
    end
  end
<% end %>
end
