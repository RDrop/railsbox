# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version '>= 1.5'

VAGRANTFILE_API_VERSION = '2'

def require_plugins(plugins = {})
  needs_restart = false
  plugins.each do |plugin, version|
    next if Vagrant.has_plugin?(plugin)
    cmd =
      [
        'vagrant plugin install',
        plugin
      ]
    cmd << "--plugin-version #{version}" if version
    system(cmd.join(' ')) || exit!
    needs_restart = true
  end
  exit system('vagrant', *ARGV) if needs_restart
end

require_plugins \
  'vagrant-bindfs' => '0.3.2'

def ansible_installed?
  require 'mkmf'
  find_executable 'ansible-playbook'
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.provider :virtualbox do |vb|
    <% if params[:autoconf] -%>
    host = RbConfig::CONFIG["host_os"]

    if host =~ /darwin/ # OS X
      # sysctl returns bytes, convert to MB
      vb.memory = `sysctl -n hw.memsize`.to_i / 1024 / 1024 / 3
      vb.cpus = `sysctl -n hw.ncpu`.to_i
    elsif host =~ /linux/ # Linux
      # meminfo returns kilobytes, convert to MB
      vb.memory = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 / 2
      vb.cpus = `nproc`.to_i
    end
    <% else %>
    vb.memory = <%= params[:vm_memory] %>
    vb.cpus = <%= params[:vm_cores] %>
    <% end %>

    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
  end

  config.vm.box = '<%= params[:vm_os] %>'

  config.vm.network 'private_network', type: 'dhcp'
  config.vm.synced_folder '../', '<%= params[:vm_shared_directory] %>'<% if params[:vm_share_type] == 'NFS' -%>, type: 'nfs'<% end %>
  config.vm.synced_folder 'ansible', '/ansible'<% if params[:vm_share_type] == 'NFS' -%>, type: 'nfs'<% end %>
  <% if params[:vm_share_type] == 'NFS' -%>
  config.bindfs.bind_folder '/vagrant', '/vagrant'
  config.bindfs.bind_folder '/ansible', '/ansible'
  <% end %>

  config.vm.define '<%= params[:vm_name] %>' do |machine|
    machine.vm.hostname = '<%= params[:server_name] %>'
    <% params[:vm_ports].each_value do |port| -%>
    machine.vm.network 'forwarded_port', guest: <%= port[:guest] %>, host: <%= port[:host] %>
    <% end %>
  end

  config.ssh.forward_agent = true

  if ansible_installed?
    config.vm.provision 'ansible' do |ansible|
      ansible.playbook = 'ansible/site.yml'
      ansible.sudo = true
      ansible.groups = {
        'webservers'           => %w(<%= params[:vm_name] %>),
        'dbservers'            => %w(<%= params[:vm_name] %>),
        'development:children' => %w(webservers dbservers)
      }
      ansible.tags = ENV['TAGS']
    end
  else
    Dir['shell/*.sh'].each do |script|
      config.vm.provision 'shell', path: script, privileged: false
    end
  end
end
